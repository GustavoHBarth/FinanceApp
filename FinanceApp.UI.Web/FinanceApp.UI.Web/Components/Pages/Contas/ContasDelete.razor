@page "/contas/delete/{id:guid}"
@rendermode InteractiveServer
@inject IContasService _contaService
@inject NavigationManager Navigation
@using FinanceApp.Application.DTOs
@using FinanceApp.Domain.Enums
@using FinanceApp.Application.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@using System.Reflection

<h1>Excluir Conta</h1>

@if (conta == null)
{
    <p>Carregando dados da conta...</p>
}
else
{
    <div class="alert alert-warning">
        <h5>Tem certeza que deseja excluir esta conta?</h5>
        <p><strong>Descrição:</strong> @conta.Descricao</p>
        <p><strong>Valor:</strong> @conta.Valor</p>
        <p><strong>Categoria:</strong> @GetCategoriaNome(conta.Categoria)</p>
        <p><strong>Data:</strong> @conta.Data.ToShortDateString()</p>
    </div>

    <button class="btn btn-danger me-2" @onclick="ExcluirConta">Excluir</button>
    <a href="/contas" class="btn btn-secondary">Cancelar</a>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private ReadContaDto conta;

    protected override async Task OnInitializedAsync()
    {
        conta = await _contaService.GetByIdAsync(id);
    }

    private async Task ExcluirConta()
    {
        await _contaService.DeleteAsync(id);
        Navigation.NavigateTo("/contas");
    }

    private string GetCategoriaNome(CategoriaConta categoria)
    {
        // Pega o membro do enum correspondente ao valor
        var memberInfo = typeof(CategoriaConta).GetMember(categoria.ToString());
        if (memberInfo != null && memberInfo.Length > 0)
        {
            // Busca o atributo Display se existir
            var displayAttr = memberInfo[0].GetCustomAttribute<DisplayAttribute>();
            if (displayAttr != null)
            {
                return displayAttr.Name;
            }
        }

        // Se não achar Display, retorna o nome do enum
        return categoria.ToString();
    }
}
